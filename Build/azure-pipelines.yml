# Build ASP.NET Core project using Azure Pipelines.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core?view=azure-devops.
# YAML schema reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema.

# Specify build number format.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=azure-devops&tabs=yaml#build-number-format.
name: '$(SourceBranchName)_$(Date:yyyyMMdd).$(Rev:rrr)'

resources:
  containers:
  # Specify the Docker container hosting the database to be used when running integration tests.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/service-containers?view=azure-devops&tabs=yaml#single-job.
  - container: 'postgres_linux_container_for_integration_tests'
    # PostgreSQL Docker image (Linux container): https://hub.docker.com/_/postgres.
    image: 'postgres:11.3-alpine'
    ports:
    - 5432/tcp
    env:
      POSTGRES_DB: 'todo'
      POSTGRES_USER: 'satrapu'

  - container: 'postgres_windows_container_for_integration_tests'
    # PostgreSQL Docker image (Windows container): https://hub.docker.com/r/stellirin/postgres-windows.
    #
    # Do *not* use 'POSTGRES_PASSWORD' environment variable as this will cause the Windows container to stop due to an error
    # which has been captured by running a PowerShell script: 
    # - powershell: 'docker container ls --all --format "{{ .ID }}" | ForEach-Object { docker logs $_  }'
    #   workingDirectory: $(Build.SourcesDirectory)
    #   displayName: Show db4it service log
    #   failOnStderr: False
    #   errorActionPreference: continue
    #   ignoreLASTEXITCODE: True
    # The output of the above task is: 'initdb: could not open file "C:\.pgpass" for reading: No such file or directory'.
    # The "offending" line inside the Docker ENTRYPOINT can be seen here: 
    # https://github.com/stellirin/docker-postgres-windows/blob/master/docker-entrypoint.cmd#L76.
    image: 'stellirin/postgres-windows:11.3'
    ports:
    - 5432/tcp
    env:
      POSTGRES_DB: 'todo'
      POSTGRES_USER: 'satrapu'

  repositories: 
  # See more about repositories here: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#repository.
  - repository: 'aspnet_core_logging'
    type: 'github'
    name: 'satrapu/aspnet-core-logging'
    clean: True
    # The value of the "endpoint" element must match the service connection name 
    # declared in Project Settings -> Service connections section of your Azure DevOps organization.
    endpoint: 'satrapu'

# Build multiple branches.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/ci-build-git?view=vsts&tabs=yaml.
trigger:
 - master
 - feature/*
 - bugfix/*
 - hotfix/*
 - release/*

# See more about Azure Pipelines variables here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts.
variables:
  # Load group containing variables applicable to all pipelines belonging to this project.
  - group: 'GlobalVariables'

  # Load SonarQube related variable group.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=vsts&tabs=yaml#use-a-variable-group.
  # Be sure to link this group to this pipeline by selecting the latter -> Edit -> Variables -> Variable Groups!
  - group: 'SonarQube'

  # Specifies the version of the .NET Core SDK to install and use when running this pipeline.
  # All releases can be found here: https://dotnet.microsoft.com/download/dotnet-core.
  - name: 'DotNetCore_SDK_Version'
    value: '2.2.203'

  # Specifies the version of the ReportGenerator tool used for generating code coverage reports.
  # All releases can be found here: https://github.com/danielpalme/ReportGenerator/releases.
  # All NuGet packages can be found here: https://www.nuget.org/packages/ReportGenerator/.
  - name: 'ReportGenerator_Version'
    value: '4.1.9'

  # Specifies the version of the SonarQube scanner to use when performing statically analysis against this project.
  # All releases can be found here: https://github.com/SonarSource/sonar-scanner-msbuild/releases.
  # All NuGet packages can be found here: https://www.nuget.org/packages/dotnet-sonarscanner/.
  - name: 'SonarScanner_Version'
    value: '4.6.2'

  # Avoid caching NuGet packages each time a build runs on an Azure DevOps agent.
  # See more here: http://donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds.
  - name: 'DotNetSkipFirstTimeExperience'
    value: 1

  # Disable .NET Core telemetry.
  # See more here: https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry#how-to-opt-out.
  - name: 'DotNetCliTelemetryOptOut'
    value: 1

  # Disable Core CLR tracing.
  - name: 'CoreHostTrace'
    value: 0

  # Represents the key of the project hosted on SonarCloud
  - name: 'CurrentProject.Sonar.ProjectKey'
    value: 'aspnet-core-logging'

# Define multiple jobs, one per supported operating system (Linux, macOS and Windows).
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/multiple-phases?tabs=yaml&view=azure-devops.
#
# Will use job templates, since all supported operating systems will run the same job.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example#job-templates
# and here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops.
jobs:
- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'linux'
      displayName: 'Build on Linux'
    pool:
      # Need a VM capable of running Linux containers
      vmImage: 'ubuntu-16.04'
    services:
      db4it: 'postgres_linux_container_for_integration_tests'
    sonar:
      enabled: False
      buildBreaker:
        enabled: False
    publishPipelineArtifacts: False

#- template: './azure-pipelines.job-template.yml'
#  parameters:
#    job:
#      name: 'macOS'
#      displayName: 'Build on macOS'
#    pool:
#      vmImage: 'macOS-10.14'
#    sonar:
#      enabled: False
#      buildBreaker:
#        enabled: False
#    publishPipelineArtifacts: False

- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'windows'
      displayName: 'Build on Windows'
    pool:
      # Need a VM capable of running Windows containers
      vmImage: 'windows-2019'
    services:
      db4it: 'postgres_windows_container_for_integration_tests'
    sonar:
      enabled: True
      buildBreaker:
        enabled: True
    publishPipelineArtifacts: True