# Build ASP.NET Core project using Azure Pipelines.
# See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops&tabs=dotnetfive.
# YAML schema reference: https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/?view=azure-pipelines.

# Specify build number format.
# See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/run-number?view=azure-devops&tabs=yaml.
name: '$(SourceBranchName)_$(Date:yyyyMMdd).$(Rev:rrr)'

resources:
  repositories:
  # See more about repositories here: https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/resources-repositories-repository?view=azure-pipelines.
  - repository: 'aspnet_core_logging'
    type: 'github'
    name: 'satrapu/aspnet-core-logging'
    # The value of the "endpoint" element must match the service connection name
    # declared in Project Settings -> Service connections section of your Azure DevOps organization.
    endpoint: 'satrapu'

# Build multiple branches.
# See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&tabs=yaml#branches.
# Since satrapu is the only committer, batching should be turned off.
trigger:
  batch: False
  branches:
    include:
      - '*'
  paths:
    exclude:
      - CODE_OF_CONDUCT.md
      - LICENSE
      - README.md

# See more about Azure Pipelines variables here: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch.
variables:
  # Load group containing variables applicable to all pipelines belonging to this project.
  - group: 'GlobalVariables'

  # Load SonarQube related variable group.
  # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&tabs=yaml#use-a-variable-group.
  # Be sure to link this group to this pipeline by selecting the latter -> Edit -> Variables -> Variable Groups!
  - group: 'SonarQube'

  # Load group containing variables applicable to tests.
  # This group contains the user name and password to be used when accessing the dockerized database targeted by the tests.
  # The user name is stored as a secret under the name "Tests.Database.Todo.Username".
  # The password is stored as a secret under the name "Tests.Database.Todo.Password".
  # See more about secret variables here: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#secret-variables.
  - group: 'Tests'

  # Specifies the versions of the .NET SDK to install and use when running this pipeline.
  # All releases can be found here: https://dotnet.microsoft.com/download/dotnet.
  - name: 'DotNet_SDK_8_Version'
    value: '8.0.101'
  # satrapu 2023-12-10: Version 7.x is used by SpecFlow.Plus.LivingDoc tool.
  - name: 'DotNet_SDK_7_Version'
    value: '7.0.405'

  # Specifies the version of the ReportGenerator tool used for generating code coverage reports.
  # All releases can be found here: https://github.com/danielpalme/ReportGenerator/releases.
  # All NuGet packages can be found here: https://www.nuget.org/packages/ReportGenerator/.
  - name: 'ReportGenerator_Version'
    value: '5.2.0'

  # Specifies the version of the SpecFlowPlusLivingDoc tool used for generating acceptance test results.
  # All NuGet packages can be found here: https://www.nuget.org/packages/SpecFlow.Plus.LivingDocPlugin.
  - name: 'SpecFlowPlusLivingDoc_Version'
    value: '3.9.57'

  # Represents the Docker image to use when running the database to be targeted by tests.
  - name: 'Tests.Database.DockerImage.Name'
    value: 'satrapu/postgresql'

  # Represents the prefix of the Docker image tag to use when running the database to be targeted by tests.
  - name: 'Tests.Database.DockerImage.TagPrefix'
    value: '15.1'

  - name: SolutionFileName
    value: 'Todo.WebApi.sln'

  - name: AcceptanceTestsHomeFolder
    value: '$(Build.SourcesDirectory)/Tests/AcceptanceTests/Todo.WebApi.AcceptanceTests'

# Define multiple jobs, one per supported operating system (Linux, macOS and Windows).
# See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml
#
# The list of virtual machine images used for running these operating systems can be found here:
# https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#software.
#
# Will use job templates, since all supported operating systems will run the same job.
# See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/jobs-template?view=azure-pipelines
# and here: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops.
jobs:
- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'linux'
      displayName: 'Run on Linux'
    pool:
      vmImage: 'ubuntu-22.04'
    sonar:
      enabled: True
      buildBreaker:
        enabled: True
    tests:
      runTests: True
      databaseHost: 'localhost'
      databaseName: 'db-for-linux'
      databaseUsername: 'tests-on-linux'
      databasePassword: '$(Tests.Database.Todo.Password)'
      databaseDockerImage: '$(Tests.Database.DockerImage.Name):$(Tests.Database.DockerImage.TagPrefix)-linux'
      composeProjectName: 'test-prerequisites-on-linux'

- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'macOS'
      displayName: 'Run on macOS'
    pool:
      vmImage: 'macOS-12'
    tests:
      runTests: True
      databaseHost: 'localhost'
      databaseName: 'db-for-macos'
      databaseUsername: 'tests-on-macos'
      databasePassword: '$(Tests.Database.Todo.Password)'
      databaseDockerImage: '$(Tests.Database.DockerImage.Name):$(Tests.Database.DockerImage.TagPrefix)-linux'
      composeProjectName: 'test-prerequisites-on-macos'

- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'windows'
      displayName: 'Run on Windows'
    pool:
      vmImage: 'windows-2022'
    runDotNetFormatCommand: True
    tests:
      runTests: True
      databaseHost: 'localhost'
      databaseName: 'db-for-windows'
      databaseUsername: 'tests-on-windows'
      databasePassword: '$(Tests.Database.Todo.Password)'
      databaseDockerImage: '$(Tests.Database.DockerImage.Name):$(Tests.Database.DockerImage.TagPrefix)-windows'
      composeProjectName: 'test-prerequisites-on-windows'
