# Build ASP.NET Core project using Azure Pipelines.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core?view=azure-devops.
# YAML schema reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema.

# Specify build number format.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=azure-devops&tabs=yaml#build-number-format.
name: '$(SourceBranchName)_$(Date:yyyyMMdd).$(Rev:rrr)'

resources:
  repositories: 
  # See more about repositories here: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#repository.
  - repository: 'aspnet_core_logging'
    type: 'github'
    name: 'satrapu/aspnet-core-logging'
    clean: True
    # The value of the "endpoint" element must match the service connection name 
    # declared in Project Settings -> Service connections section of your Azure DevOps organization.
    endpoint: 'satrapu'

# Build multiple branches.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/ci-build-git?view=vsts&tabs=yaml.
trigger:
 - master
 - feature/*
 - bugfix/*
 - hotfix/*
 - release/*

# See more about Azure Pipelines variables here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts.
variables:
  # Load group containing variables applicable to all pipelines belonging to this project.
  - group: 'GlobalVariables'

  # Load SonarQube related variable group.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=vsts&tabs=yaml#use-a-variable-group.
  # Be sure to link this group to this pipeline by selecting the latter -> Edit -> Variables -> Variable Groups!
  - group: 'SonarQube'

  # Load group containing variables applicable to integration tests.
  # This group contains the password to be used when accessing the dockerized database targeted by the integration tests.
  # This password is stored as a secret under the name "IntegrationTests.Database.Todo.Password".
  - group: 'IntegrationTests'

  # Specifies the version of the .NET Core SDK to install and use when running this pipeline.
  # All releases can be found here: https://dotnet.microsoft.com/download/dotnet-core.
  - name: 'DotNetCore_SDK_Version'
    value: '3.1.100'

  # Specifies the version of the ReportGenerator tool used for generating code coverage reports.
  # All releases can be found here: https://github.com/danielpalme/ReportGenerator/releases.
  # All NuGet packages can be found here: https://www.nuget.org/packages/ReportGenerator/.
  - name: 'ReportGenerator_Version'
    value: '4.4.0'

  # Avoid caching NuGet packages each time a build runs on an Azure DevOps agent.
  # See more here: http://donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds.
  - name: 'DotNetSkipFirstTimeExperience'
    value: 1

  # Disable .NET Core telemetry.
  # See more here: https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry#how-to-opt-out.
  - name: 'DotNetCliTelemetryOptOut'
    value: 1

  # Disable Core CLR tracing.
  - name: 'CoreHostTrace'
    value: 0

  # Represents the name of the database to be targeted by integration tests
  - name: 'IntegrationTests.Database.Todo.Name'
    value: 'todo-db4it'

  # Represents the user used for accessing the database to be targeted by integration tests
  - name: 'IntegrationTests.Database.Todo.Username'
    value: 'satrapu'

# Define multiple jobs, one per supported operating system (Linux, macOS and Windows).
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/multiple-phases?tabs=yaml&view=azure-devops.
#
# The list of virtual machine images used for running these operating systems can be found here: 
# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#use-a-microsoft-hosted-agent.
#
# Will use job templates, since all supported operating systems will run the same job.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example#job-templates
# and here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops.
jobs:
- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'linux'
      displayName: 'Run on Linux'
    pool:
      vmImage: 'ubuntu-18.04'
    sonar:
      enabled: True
      buildBreaker:
        enabled: True
    db4it:
      dockerImage: 'postgres'
      dockerImageTag: '12-alpine'
      dockerContainerName: 'db4it'
      dockerPortMapping: '9876:5432/tcp'
      dockerHostPortBuildVariableName: 'db4it.dockerHostPort'
      dockerContainerEnvironmentVariables: >-
        -e "POSTGRES_DB=$(IntegrationTests.Database.Todo.Name)"
        -e "POSTGRES_USER=$(IntegrationTests.Database.Todo.Username)"
        -e "POSTGRES_PASSWORD=$(IntegrationTests.Database.Todo.Password)"
      databaseConnectionString: 
        value: >-
          Host=localhost;
          Port=9876;
          Database=$(IntegrationTests.Database.Todo.Name);
          Username=$(IntegrationTests.Database.Todo.Username);
          Password=$(IntegrationTests.Database.Todo.Password);
        portPlaceholder: '__DockerHostPort__'
      databaseReadinessStrategy: 'log-polling'
      dockerContainerLogPatternForDatabaseReady: 'database system is ready to accept connections'

- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'macOS'
      displayName: 'Run on macOS'
    pool:
      vmImage: 'macOS-10.15'
    db4it:
      dockerImage: 'postgres'
      dockerImageTag: '12-alpine'
      dockerContainerName: 'db4it'
      dockerPortMapping: '5432/tcp'
      dockerHostPortBuildVariableName: 'db4it.dockerHostPort'
      dockerContainerEnvironmentVariables: >-
        -e "POSTGRES_DB=$(IntegrationTests.Database.Todo.Name)"
        -e "POSTGRES_USER=$(IntegrationTests.Database.Todo.Username)"
        -e "POSTGRES_PASSWORD=$(IntegrationTests.Database.Todo.Password)"
      dockerContainerLogPatternForDatabaseReady: 'database system is ready to accept connections'
      databaseConnectionString: 
        value: >-
          Host=localhost;
          Port=__DockerHostPort__;
          Database=$(IntegrationTests.Database.Todo.Name);
          Username=$(IntegrationTests.Database.Todo.Username);
          Password=$(IntegrationTests.Database.Todo.Password);
        portPlaceholder: '__DockerHostPort__'
      databaseReadinessStrategy: 'healthcheck'
      dockerContainerHealthcheckCommand: >-
        pg_isready
        --host=localhost
        --port=5432
        --dbname=$(IntegrationTests.Database.Todo.Name)
        --username=$(IntegrationTests.Database.Todo.Username)
        --quiet

- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'windows'
      displayName: 'Run on Windows'
    pool:
      vmImage: 'windows-2019'
    db4it:
      dockerImage: 'stellirin/postgres-windows'
      dockerImageTag: '12'
      dockerContainerName: 'db4it'
      dockerPortMapping: '5432'
      dockerHostPortBuildVariableName: 'db4it.dockerHostPort'
      dockerContainerEnvironmentVariables: >-
        -e "POSTGRES_DB=$(IntegrationTests.Database.Todo.Name)"
        -e "POSTGRES_USER=$(IntegrationTests.Database.Todo.Username)"
        -e "POSTGRES_PASSWORD=$(IntegrationTests.Database.Todo.Password)"
      databaseConnectionString: 
        value: >-
          Host=localhost;
          Port=__DockerHostPort__;
          Database=$(IntegrationTests.Database.Todo.Name);
          Username=$(IntegrationTests.Database.Todo.Username);
          Password=$(IntegrationTests.Database.Todo.Password);
        portPlaceholder: '__DockerHostPort__'
      databaseReadinessStrategy: 'log-polling'
      dockerContainerLogPatternForDatabaseReady: 'PostgreSQL init process complete; ready for start up.'