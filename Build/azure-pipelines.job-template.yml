parameters:
  job:
    name: ''
    displayName: ''
  pool: ''
  build:
    configuration: 'Release'
  installDotNetSdk: True
  # @satrapu 2020-09-03: Since currently downloading an archive containing a cache of restored
  # NuGet packages takes considerably more time than just doing a restore
  # with each build, this feature has been turned off.
  cacheRestoredNuGetPackages: False
  sonar:
    enabled: False
    verbose: 'true'
    sourceEncoding: 'UTF-8'
    runAnalysisTimeoutInMinutes: 5
    publishPollingTimeoutSeconds: 300
    buildBreaker:
      enabled: False
  publishPipelineArtifacts: True
  runDotNetFormatCommand: False
  tests:
    runTests: True
    databaseHost: ''
    databaseName: ''
    databaseUsername: ''
    databasePassword: ''
    databaseDockerImage: ''
    composeBaseCommand: ''
    composeProjectName: ''

jobs:
- job: ${{ parameters.job.name }}
  displayName: ${{ parameters.job.displayName }}
  continueOnError: False
  pool: ${{ parameters.pool }}
  workspace:
    clean: all
  variables:
    # Environment variable used when caching restored NuGet packages.
    # See more about this variable here: https://learn.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-environment-variables.
    # See more about caching NuGet packages here: https://learn.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops#netnuget.
    NUGET_PACKAGES: '$(Pipeline.Workspace)/.nuget/packages'

    # Avoid caching NuGet packages each time a build runs on an Azure DevOps agent.
    # See more here: https://www.donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds.
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: '1'

    # Disable .NET SDK telemetry.
    # See more here: https://learn.microsoft.com/en-us/dotnet/core/tools/telemetry#how-to-opt-out.
    DOTNET_CLI_TELEMETRY_OPTOUT: '1'

    # Disable Core CLR tracing.
    # See more here: https://learn.microsoft.com/en-us/dotnet/core/dependency-loading/default-probing#how-do-i-debug-the-probing-properties-construction.
    COREHOST_TRACE: '0'

    # Disable downloading XML documentation when restoring NuGet package.
    # See more here: https://learn.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-environment-variables.
    NUGET_XMLDOC_MODE: 'skip'

    ArchitectureTestsOutcome: 'failure'
    UnitTestsOutcome: 'failure'
    IntegrationTestsOutcome: 'failure'
    AcceptanceTestsOutcome: 'failure'
    AllTestsOutcome: 'failure'
  steps:
  # Customize the way this job checkouts the current Git branch.
  # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/steps-checkout?view=azure-pipelines.
  - checkout: self
    name: 'checkout_source_code'
    displayName: 'Checkout source code'
    lfs: False
    submodules: False
    # Fetch all history to avoid SonarQube complaining about scanning a shallow clone.
    # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/steps-checkout?view=azure-pipelines#shallow-fetch.
    fetchDepth: 0
    fetchTags: True
    persistCredentials: False

  # Install specific .NET SDK version used for building the application.
  # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops.
  # Installing a specific .NET SDK version is needed to avoid installing a .NET global tool in a following task and
  # then have Azure DevOps complain that it cannot find it.
  # This issue is documented here: https://github.com/Microsoft/azure-pipelines-tasks/issues/8291.
  - task: UseDotNet@2
    name: 'install_dotnet_sdk_required_by_application'
    displayName: 'Install .NET SDK required by application'
    condition: eq(${{ parameters.installDotNetSdk }}, True)
    inputs:
      packageType: 'sdk'
      version: $(DotNetSdkVersionUsedByApplication)

  - task: UseDotNet@2
    name: 'install_dotnet_sdk_required_by_livingdoc'
    displayName: 'Install .NET SDK required by living doc'
    inputs:
      packageType: 'sdk'
      version: $(DotNetSdkVersionUsedByLivingDoc)

  # Prepares analysis on SonarCloud.
  # Before using any Sonar tasks, please make sure SonarCloud extension is installed in the Azure DevOps organization
  # where the project built using this pipeline resides.
  # See more about this extension here: https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud.
  - task: SonarCloudPrepare@3
    name: 'prepare_analysis_on_sonar'
    displayName: 'Prepare analysis on SonarCloud'
    condition: eq(${{ parameters.sonar.enabled }}, True)
    inputs:
      SonarCloud: 'sonar-cloud'
      organization: 'satrapu-github'
      projectKey: 'aspnet-core-logging'
      scannerMode: 'dotnet'
      # The 'projectVersion' property is needed to identify what new code means from SonarCloud point of view.
      # Additionally, select "Previous version" inside the New Code page found on SonarCloud site, which is available
      # here: https://sonarcloud.io/project/new_code?id=aspnet-core-logging.
      # See more here: https://docs.sonarqube.org/latest/project-administration/new-code-period/.
      projectVersion: 'build.id.$(Build.BuildId)'
      # Provide more configuration for Sonar - based on this example: https://github.com/SonarSource/sonar-dotnet/blob/master/azure-pipelines.yml.
      # Check the various analysis parameters here:
      #   - https://docs.sonarqube.org/latest/analysis/analysis-parameters/
      #   - https://docs.sonarcloud.io/advanced-setup/analysis-scope/
      #   - https://docs.sonarqube.org/latest/project-administration/narrowing-the-focus/
      extraProperties: |
        sonar.verbose=${{ parameters.sonar.verbose }}
        sonar.sourceEncoding=${{ parameters.sonar.sourceEncoding }}
        sonar.cs.nunit.reportsPaths=$(Build.SourcesDirectory)/Tests/**/TestResults/TestResults.xml
        sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/Tests/**/coverage.opencover.xml
        sonar.coverage.exclusions=Sources/Todo.Persistence/Entities/**,Sources/Todo.Persistence/Migrations/**,Sources/Todo.Telemetry.OpenTelemetry.OpenTelemetryActivator,/Tests/**
        sonar.analysis.buildNumber=$(Build.BuildId)
        sonar.analysis.pipeline=$(Build.BuildId)

  # Cache NuGet packages to avoid having to restore them during each build.
  # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops#netnuget
  # and here: https://learn.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops#conditioning-on-cache-restoration.
  - task: Cache@2
    name: 'cache_restored_nuget_packages'
    displayName: Cache restored NuGet packages
    condition: eq(${{ parameters.cacheRestoredNuGetPackages }}, True)
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**'
      restoreKeys: |
        nuget | "$(Agent.OS)"
      path: $(NUGET_PACKAGES)
      cacheHitVar: CacheRestoredForNuGetPackages

  # Restore NuGet packages using 'dotnet restore' command.
  # See more about this command here: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-restore?source=docs.
  #
  # The command used for generating the lock files is:
  # dotnet restore ./$(SolutionFileName) --configfile ./nuget.config --use-lock-file --lock-file-path packages.lock.json
  - script: >-
      dotnet restore $(Build.SourcesDirectory)/$(SolutionFileName)
      --configfile $(Build.SourcesDirectory)/nuget.config
      --locked-mode
    name: 'restore_nuget_packages'
    displayName: 'Restore NuGet packages'
    condition: ne(variables['CacheRestoredForNuGetPackages'], 'true')

  # Compile source code using 'dotnet build' command.
  # See more about this command here: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-build.
  - script: >-
      dotnet build $(Build.SourcesDirectory)/$(SolutionFileName)
      --configuration ${{ parameters.build.configuration }}
      --no-restore
    name: 'build_sources'
    displayName: 'Build sources'

  # Run 'dotnet format' command and generate a report with its outcome.
  - script: >-
      dotnet format
      --no-restore
      --severity warn
      --verify-no-changes
      --verbosity quiet
      --report $(Build.SourcesDirectory)/.dotnet-format-report.json
      $(Build.SourcesDirectory)/$(SolutionFileName)
    name: 'run_dotnet_format'
    displayName: 'Enforce code style & formatting rules'
    condition: eq(${{ parameters.runDotNetFormatCommand }}, True)

  # Publish the report generated by 'dotnet format' command.
  - task: PublishPipelineArtifact@1
    name: 'publish_dotnet_format_report'
    displayName: 'Publish dotnet-format report'
    condition: |
      and
      (
          failed()
        , eq(${{ parameters.runDotNetFormatCommand }}, True)
        , eq(${{ parameters.publishPipelineArtifacts }}, True)
      )
    inputs:
      artifact: 'dotnet-format-report'
      path: '$(Build.SourcesDirectory)/.dotnet-format-report.json'

  # Run architecture tests
  - script: >-
      dotnet test $(Build.SourcesDirectory)/$(SolutionFileName)
      --no-build
      --no-restore
      --configuration ${{ parameters.build.configuration }}
      --test-adapter-path "."
      --logger "nunit"
      --filter "TestCategory=ArchitectureTests"
    name: 'run_architecture_tests'
    displayName: 'Run architecture tests'
    condition: eq(${{ parameters.tests.runTests }}, True)

  - powershell: echo "##vso[task.setvariable variable=ArchitectureTestsOutcome]success"
    name: 'set_architecture_tests_outcome_variable'
    displayName: 'Set ArchitectureTestsOutcome variable'
    condition: |
      and
      (
          succeeded()
        , eq(${{ parameters.tests.runTests }}, True)
      )

  - task: PublishTestResults@2
    name: 'publish_architecture_test_results'
    displayName: 'Publish architecture test results'
    condition: |
      and
      (
          succeededOrFailed()
        , eq(${{ parameters.tests.runTests }}, True)
      )
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(Build.SourcesDirectory)/Tests/ArchitectureTests/**/TestResults/TestResults.xml'
      mergeTestResults: True
      buildConfiguration: ${{ parameters.build.configuration }}
      publishRunAttachments: True

  # Run unit tests and collect code coverage metrics using 'dotnet test' command.
  # See more about this command here: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test.
  # See more about running selective tests here: https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests#nunit.
  # Decorate the AssemblyInfo.cs found inside each unit test related project with:
  #     [assembly: NUnit.Framework.Category("UnitTests")]
  - script: >-
      dotnet test $(Build.SourcesDirectory)/$(SolutionFileName)
      --no-build
      --no-restore
      --configuration ${{ parameters.build.configuration }}
      --test-adapter-path "."
      --logger "nunit"
      --filter "TestCategory=UnitTests"
      --settings $(Build.SourcesDirectory)/Tests/tests.runsettings
    name: 'run_unit_tests'
    displayName: 'Run unit tests'
    condition: |
      and
      (
          eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['ArchitectureTestsOutcome'], 'success')
      )

  - powershell: echo "##vso[task.setvariable variable=UnitTestsOutcome]success"
    name: 'set_unit_tests_outcome_variable'
    displayName: 'Set UnitTestsOutcome variable'
    condition: |
      and
      (
          succeeded()
        , eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['ArchitectureTestsOutcome'], 'success')
      )

  # Publish unit test results.
  # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/publish-test-results-v2?view=azure-pipelines&tabs=trx%2Ctrxattachments%2Cyaml.
  - task: PublishTestResults@2
    name: 'publish_unit_test_results'
    displayName: 'Publish unit test results'
    condition: |
      and
      (
          eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['ArchitectureTestsOutcome'], 'success')
      )
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(Build.SourcesDirectory)/Tests/UnitTests/**/TestResults/TestResults.xml'
      mergeTestResults: True
      buildConfiguration: ${{ parameters.build.configuration }}
      publishRunAttachments: True

  # Install and start Docker Engine on macOS based agents only.
  # See more here: https://web.archive.org/web/20201012054023if_/https://github.com/microsoft/azure-pipelines-image-generation/issues/738#issuecomment-519571491.
  - script: |
      chmod +x $(Build.SourcesDirectory)/Build/start-docker-on-macOS.sh
      $(Build.SourcesDirectory)/Build/start-docker-on-macOS.sh
    name: 'install_and_start_docker_on_macos'
    displayName: 'Install and start Docker on macOS'
    condition: |
      and
      (
          eq(variables['Agent.OS'], 'Darwin')
        , eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['UnitTestsOutcome'], 'success')
      )

  # Run a PowerShell script to start compose services needed when running tests.
  - task: PowerShell@2
    name: 'start_compose_services_used_by_tests'
    displayName: 'Start compose services used by tests'
    condition: |
      and
      (
          succeeded()
        , eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['UnitTestsOutcome'], 'success')
      )
    inputs:
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)/Build/RunComposeServices.ps1'
      arguments: >-
        -ComposeBaseCommand '${{ parameters.tests.composeBaseCommand }}' `
        -ComposeProjectName '${{ parameters.tests.composeProjectName }}' `
        -RelativePathToComposeFile './db4tests/docker-compose.yml' `
        -EnvironmentVariables `
         @{ `
           'db_docker_image'='${{ parameters.tests.databaseDockerImage }}'; `
           'db_name'='${{ parameters.tests.databaseName }}'; `
           'db_username'='${{ parameters.tests.databaseUsername }}'; `
           'db_password'='${{ parameters.tests.databasePassword }}'; `
         }
      # Docker Compose commands write to standard error stream, thus tricking Azure DevOps
      # into thinking this PowerShell script has failed, which isn't the case.
      # Due to this limitation (see more here: https://github.com/docker/compose/issues/5590),
      # I need to rely on $? in my script to detect failures.
      # Thus, set 'errorActionPreference' property to 'Continue' and set 'failOnStderr' property to False.
      errorActionPreference: 'Continue'
      failOnStderr: False
      workingDirectory: $(Build.SourcesDirectory)

  # Run integration tests and collect code coverage metrics using 'dotnet test' command.
  # See more about this command here: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test.
  # Decorate the AssemblyInfo.cs found inside each integration test related project with:
  #     [assembly: NUnit.Framework.Category("IntegrationTests")]
  - script: >-
      dotnet test $(Build.SourcesDirectory)/$(SolutionFileName)
      --no-build
      --no-restore
      --configuration ${{ parameters.build.configuration }}
      --test-adapter-path "."
      --logger "nunit"
      --filter "TestCategory=IntegrationTests"
      --settings $(Build.SourcesDirectory)/Tests/tests.runsettings
    name: 'run_integration_tests'
    displayName: 'Run integration tests'
    condition: |
      and
      (
          succeeded()
        , eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['UnitTestsOutcome'], 'success')
      )
    env:
      TODO_WEB_API_BY_SATRAPU_GENERATEJWT__SECRET: $(Tests.GenerateJwt.Secret)
      TODO_WEB_API_BY_SATRAPU_CONNECTIONSTRINGS__INTEGRATIONTESTS: >-
        Host=${{ parameters.tests.databaseHost }};
        Port=$(compose.project.${{ parameters.tests.composeProjectName }}.service.db4it.port.5432);
        Database=${{ parameters.tests.databaseName }};
        Username=${{ parameters.tests.databaseUsername }};
        Password=${{ parameters.tests.databasePassword }};
      # Variable needed when running ConfigurationControllerTests.GetConfigurationDebugView_WhenCalled_MustBehaveAsExpected test method where
      # environmentName parameter is set to anything but 'AcceptanceTests' or 'IntegrationTests'.
      TODO_WEB_API_BY_SATRAPU_CONNECTIONSTRINGS__APPLICATION: >-
        Host=${{ parameters.tests.databaseHost }};
        Port=$(compose.project.${{ parameters.tests.composeProjectName }}.service.db4it.port.5432);
        Database=${{ parameters.tests.databaseName }};
        Username=${{ parameters.tests.databaseUsername }};
        Password=${{ parameters.tests.databasePassword }};
      # Variable needed when running ConfigurationControllerTests.GetConfigurationDebugView_WhenCalled_MustBehaveAsExpected test method where
      # environmentName parameter is set to 'AcceptanceTests'.
      TODO_WEB_API_BY_SATRAPU_CONNECTIONSTRINGS__ACCEPTANCETESTS: >-
        Host=${{ parameters.tests.databaseHost }};
        Port=$(compose.project.${{ parameters.tests.composeProjectName }}.service.db4it.port.5432);
        Database=${{ parameters.tests.databaseName }};
        Username=${{ parameters.tests.databaseUsername }};
        Password=${{ parameters.tests.databasePassword }};

  - powershell: echo "##vso[task.setvariable variable=IntegrationTestsOutcome]success"
    name: 'set_integration_tests_outcome_variable'
    displayName: 'Set IntegrationTestsOutcome variable'
    condition: |
      and
      (
          succeeded()
        , eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['UnitTestsOutcome'], 'success')
      )

  # Run a PowerShell script to export the logs of the Docker Compose service
  # used by integration tests to a specific folder.
  - task: PowerShell@2
    name: 'export_compose_service_logs'
    displayName: 'Export compose service logs'
    condition: |
      and
      (
          eq(${{ parameters.publishPipelineArtifacts }}, True)
        , eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['UnitTestsOutcome'], 'success')
      )
    inputs:
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)/Build/PublishComposeServiceLogs.ps1'
      arguments: >-
        -ComposeProjectName '${{ parameters.tests.composeProjectName }}' `
        -LogsOutputFolder '$(Build.SourcesDirectory)/Tests/.ComposeService-Logs'
      # Docker Compose commands write to standard error stream, thus tricking Azure DevOps
      # into thinking this PowerShell script has failed, which isn't the case.
      # Due to this limitation (see more here: https://github.com/docker/compose/issues/5590),
      # I need to rely on $? in my script to detect failures.
      # Thus, set 'errorActionPreference' property to 'Continue' and set 'failOnStderr' property to False.
      errorActionPreference: 'Continue'
      failOnStderr: False
      workingDirectory: $(Build.SourcesDirectory)

  # Publish integration test results.
  # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/publish-test-results-v2?view=azure-pipelines&tabs=trx%2Ctrxattachments%2Cyaml.
  - task: PublishTestResults@2
    name: 'publish_integration_test_results'
    displayName: 'Publish integration test results'
    condition: |
      and
      (
          eq(${{ parameters.publishPipelineArtifacts }}, True)
        , eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['UnitTestsOutcome'], 'success')
      )
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(Build.SourcesDirectory)/Tests/IntegrationTests/**/TestResults/TestResults.xml'
      mergeTestResults: True
      buildConfiguration: ${{ parameters.build.configuration }}
      publishRunAttachments: True

  # Install reportgenerator tool to be able to generate code coverage related reports using 'dotnet tool install' command.
  # See more about this command here: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-tool-install.
  - script: >-
      dotnet tool install dotnet-reportgenerator-globaltool
      --tool-path $(Build.SourcesDirectory)/Tests/.ReportGenerator
      --version $(ReportGenerator_Version)
    name: 'install_code_coverage_report_generator'
    displayName: 'Install code coverage report generator tool'
    condition: |
     and
     (
       eq(${{ parameters.tests.runTests }}, True)
       , eq(variables['IntegrationTestsOutcome'], 'success')
     )

  # Generate code coverage report:
  #   - combine several OpenCover coverage data files into one single file in Cobertura format
  #   - generate coverage HTML report ready to be displayed by Azure DevOps
  # See more here: https://github.com/danielpalme/ReportGenerator#usage.
  # See more about the output formats here: https://github.com/danielpalme/ReportGenerator/wiki/Output-formats.
  # In order to be able to see the report inside the Code Coverage tab on Azure DevOps,
  # enable Azure Boards for your project, as documented here: https://developercommunity.visualstudio.com/solutions/403137/view.html.
  - script: >-
      $(Build.SourcesDirectory)/Tests/.ReportGenerator/reportgenerator
      "-reports:$(Build.SourcesDirectory)/Tests/**/coverage.opencover.xml"
      "-targetdir:$(Build.SourcesDirectory)/Tests/.CodeCoverageReport"
      "-reporttypes:Cobertura"
    name: 'generate_code_coverage_report'
    displayName: 'Generate code coverage report'
    condition: |
      and
      (
        eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['IntegrationTestsOutcome'], 'success')
      )

  # Publish code coverage report.
  # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/publish-code-coverage-results-v1?view=azure-pipelines.
  - task: PublishCodeCoverageResults@1
    name: 'publish_code_coverage_report'
    displayName: 'Publish code coverage report'
    condition: |
     and
     (
       eq(${{ parameters.tests.runTests }}, True)
       , eq(variables['IntegrationTestsOutcome'], 'success')
     )
    inputs:
      codeCoverageTool: 'Cobertura'
      pathToSources: '$(Build.SourcesDirectory)/Sources'
      summaryFileLocation: '$(Build.SourcesDirectory)/Tests/.CodeCoverageReport/Cobertura.xml'

  # Run acceptance tests.
  - script: >-
      dotnet test $(AcceptanceTestsHomeFolder)
      --no-build
      --no-restore
      --configuration ${{ parameters.build.configuration }}
      --test-adapter-path "."
      --filter "TestCategory=AcceptanceTests"
    name: 'run_acceptance_tests'
    displayName: 'Run acceptance tests'
    condition: |
      and
      (
        succeeded()
        , eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['IntegrationTestsOutcome'], 'success')
      )
    env:
      TODO_WEB_API_BY_SATRAPU_CONNECTIONSTRINGS__ACCEPTANCETESTS: >-
        Host=${{ parameters.tests.databaseHost }};
        Port=$(compose.project.${{ parameters.tests.composeProjectName }}.service.db4at.port.5432);
        Database=${{ parameters.tests.databaseName }};
        Username=${{ parameters.tests.databaseUsername }};
        Password=${{ parameters.tests.databasePassword }};
      TODO_WEB_API_BY_SATRAPU_GENERATEJWT__SECRET: $(Tests.GenerateJwt.Secret)

  - powershell: echo "##vso[task.setvariable variable=AcceptanceTestsOutcome]success"
    name: 'set_acceptance_tests_outcome_variable'
    displayName: 'Set AcceptanceTestsOutcome variable'
    condition: |
      and
      (
        succeeded()
        , eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['IntegrationTestsOutcome'], 'success')
      )

  - powershell: echo "##vso[task.setvariable variable=AllTestsOutcome]success"
    name: 'set_all_tests_outcome_variable'
    displayName: 'Set AllTestsOutcome variable'
    condition: |
      and
      (
        succeeded()
        , eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['AcceptanceTestsOutcome'], 'success')
      )

  # Install SpecFlow.Plus.LivingDoc.CLI tool to be able to generate acceptance test results report.
  # See more about this tool here: https://docs.specflow.org/projects/getting-started/en/latest/gettingstartedrider/Step8r.html.
  - script: >-
      dotnet tool install SpecFlow.Plus.LivingDoc.CLI
      --tool-path $(Build.SourcesDirectory)/Tests/.SpecFlow.Plus.LivingDoc
      --version $(SpecFlowPlusLivingDoc_Version)
    name: 'install_specflow_plus_livingdoc'
    displayName: 'Install SpecFlow.Plus.LivingDoc tool'
    condition: |
      and
      (
        eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['IntegrationTestsOutcome'], 'success')
      )

  # Ensure the path pointing to the acceptance test execution file contains the proper file separator.
  - task: PowerShell@2
    name: 'normalize_acceptance_test_execution_file_path'
    displayName: 'Normalize acceptance test execution file path'
    condition: |
      and
      (
        eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['IntegrationTestsOutcome'], 'success')
      )
    inputs:
      targetType: 'inline'
      errorActionPreference: 'stop'
      script: |
        $acceptanceTestsHomeFolder = Resolve-Path -Path '$(AcceptanceTestsHomeFolder)'
        $normalizedTestExecutionFilePath = [IO.Path]::Combine($acceptanceTestsHomeFolder, 'bin', '${{ parameters.build.configuration }}', 'net9.0',
          'TestExecution.json')
        Write-Output "##vso[task.setvariable variable=NormalizedTestExecutionFilePath]$normalizedTestExecutionFilePath"
        Write-Output "The normalized test execution file path is: $normalizedTestExecutionFilePath"

  # Generate living doc.
  # See more here: https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/CLI/livingdoc-feature-folder.html.
  - task: PowerShell@2
    name: 'generate_living_doc'
    displayName: 'Generate living doc'
    condition: |
      and
      (
        eq(${{ parameters.tests.runTests }}, True)
        , eq(variables['IntegrationTestsOutcome'], 'success')
      )
    inputs:
      targetType: 'inline'
      errorActionPreference: 'stop'
      script: >-
        $(Build.SourcesDirectory)/Tests/.SpecFlow.Plus.LivingDoc/livingdoc
        feature-folder $(AcceptanceTestsHomeFolder)
        --test-execution-json $(NormalizedTestExecutionFilePath)
        --output $(Build.SourcesDirectory)/Tests/AcceptanceTests
        --output-type HTML

  # Publish test related artifacts.
  # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#publish-a-pipeline-artifact.
  #
  # This task will make use of the ~/Tests/.artifactignore file.
  # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#using-artifactignore-files.
  - task: PublishPipelineArtifact@1
    name: 'publish_test_related_artifacts'
    displayName: 'Publish test related artifacts'
    condition: |
      and
      (
          eq(${{ parameters.publishPipelineArtifacts }}, True)
        , eq(${{ parameters.tests.runTests }}, True)
      )
    inputs:
      artifact: 'test-artifacts-$(Agent.OS)-$(Agent.OSArchitecture)-$(Build.BuildNumber)-$(Build.BuildID)'
      path: '$(Build.SourcesDirectory)/Tests'

  # Run Sonar analysis.
  - task: SonarCloudAnalyze@3
    name: 'run_sonar_analysis'
    displayName: 'Run Sonar analysis'
    condition: |
      and
      (
          eq(${{ parameters.sonar.enabled }}, True)
        , eq(variables['AllTestsOutcome'], 'success')
      )
    inputs:
      timeoutInMinutes: ${{ parameters.sonar.runAnalysisTimeoutInMinutes }}

  # Publish Sonar analysis results to the remote server.
  - task: SonarCloudPublish@3
    name: 'publish_sonar_quality_gate_result'
    displayName: 'Publish Sonar quality gate result'
    condition: |
      and
      (
          eq(${{ parameters.sonar.enabled }}, True)
        , eq(variables['AllTestsOutcome'], 'success')
      )
    inputs:
      pollingTimeoutSeconds: ${{ parameters.sonar.publishPollingTimeoutSeconds }}

  # Load the current Git branch name into a build variable to be later used when querying SonarCloud web API for the
  # results of the static analysis performed against this branch.
  # This build step will be run only in case the build was triggered by a pull request.
  - task: PowerShell@2
    name: 'load_current_git_branch_name_from_pull_request_info'
    displayName: 'Load current Git branch name from PR info'
    condition: |
      and
      (
          eq(${{ parameters.sonar.enabled }}, True)
        , eq(${{ parameters.sonar.buildBreaker.enabled }}, True)
        , eq(variables['AllTestsOutcome'], 'success')
        , eq(variables['Build.Reason'], 'PullRequest')
      )
    inputs:
      targetType: 'inline'
      errorActionPreference: 'stop'
      script: |
        Write-Output "##vso[task.setvariable variable=CurrentGitBranchName]$(System.PullRequest.SourceBranch)"

  # Load the current Git branch name into a build variable to be later used when querying SonarCloud web API for the
  # results of the static analysis performed against this branch.
  # This build step will be run only in case the build was triggered by anything else but a pull request (e.g. a mere
  # commit, a scheduled build, etc.).
  - task: PowerShell@2
    name: 'load_current_git_branch_name_from_commit_info'
    displayName: 'Load current Git branch name from commit info'
    condition: |
      and
      (
          eq(${{ parameters.sonar.enabled }}, True)
        , eq(${{ parameters.sonar.buildBreaker.enabled }}, True)
        , eq(variables['AllTestsOutcome'], 'success')
        , ne(variables['Build.Reason'], 'PullRequest')
      )
    inputs:
      targetType: 'inline'
      errorActionPreference: 'stop'
      script: |
        Write-Output "##vso[task.setvariable variable=CurrentGitBranchName]$(Build.SourceBranch)"

  # Normalize Git branch name since Azure DevOps does not provide the expected one (e.g. 'master' or 'feature/my-feature-branch').
  # See more here: https://stackoverflow.com/questions/59956206/how-to-get-a-branch-name-with-a-slash-in-azure-devops
  # and here: https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#build-variables.
  - task: PowerShell@2
    name: 'normalize_current_git_branch_name'
    displayName: 'Normalize current Git branch name'
    condition: |
      and
      (
          eq(${{ parameters.sonar.enabled }}, True)
        , eq(${{ parameters.sonar.buildBreaker.enabled }}, True)
        , eq(variables['AllTestsOutcome'], 'success')
      )
    inputs:
      targetType: 'inline'
      errorActionPreference: 'stop'
      script: |
        $currentGitBranchName = "$(CurrentGitBranchName)"
        $normalizedGitBranchName = $currentGitBranchName -Replace 'refs/heads/', ''
        Write-Output "##vso[task.setvariable variable=NormalizedGitBranchName]$normalizedGitBranchName"
        Write-Output "The current Git branch name is: $currentGitBranchName"
        Write-Output "The normalized Git branch name is: $normalizedGitBranchName"

  # Run a PowerShell script to break the build in case Sonar quality gate has failed.
  # See more here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/powershell-v2?view=azure-pipelines.
  - task: PowerShell@2
    name: 'sonar_build_breaker'
    displayName: 'Run Sonar build breaker'
    # See more about conditions here: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml%2Cstages.
    condition: |
      and
      (
          eq(${{ parameters.sonar.enabled }}, True)
        , eq(${{ parameters.sonar.buildBreaker.enabled }}, True)
        , eq(variables['AllTestsOutcome'], 'success')
      )
    inputs:
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)/Build/SonarBuildBreaker.ps1'
      arguments: >-
        -SonarProjectKey 'aspnet-core-logging'
        -SonarServerBaseUrl 'https://sonarcloud.io'
        -SonarToken "$(CurrentProject.Sonar.Token)"
        -GitBranchName "$(NormalizedGitBranchName)"
      errorActionPreference: 'stop'
      failOnStderr: True
      workingDirectory: $(Build.SourcesDirectory)
