parameters:
  job:
    name: ''
    displayName: ''
  pool: ''
  build:
    configuration: 'Release'

jobs:
- job: ${{ parameters.job.name }}
  displayName: ${{ parameters.job.displayName }}
  continueOnError: False
  pool: ${{ parameters.pool }}
  steps:
  # Compile source code.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=vsts.
  - task: DotNetCoreCLI@2
    displayName: Build sources
    name: build_sources
    enabled: true
    inputs:
      command: custom
      custom: build
      arguments: 'Todo.sln --configuration ${{ parameters.build.configuration }}'
  # Run tests.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=vsts.
  - task: DotNetCoreCLI@2
    displayName: Run integration tests
    name: run_integration_tests
    enabled: true
    inputs:
      command: custom
      custom: test
      projects: ./Tests/TodoWebApp.IntegrationTests/TodoWebApp.IntegrationTests.csproj
      arguments: '--configuration ${{ parameters.build.configuration }} --no-build --logger "trx;LogFileName=TodoWebApp.IntegrationTests.TestResults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput="./CodeCoverage/code-coverage-data.xml"'
  # Publish test results.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=vsts&tabs=yaml.
  - task: PublishTestResults@2
    displayName: Publish integration test results
    name: publish_integration_test_results
    enabled: true
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/*.TestResults.trx'
      mergeTestResults: True
      buildConfiguration: ${{ parameters.build.configuration }}
      publishRunAttachments: True
  # Install reportgenerator tool to be able to generate code coverage HTML report.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=vsts.
  - task: DotNetCoreCLI@2
    displayName: Install code coverage report generator tool
    name: install_code_coverage_report_generator
    enabled: true
    inputs:
      command: custom
      custom: tool
      arguments: 'install dotnet-reportgenerator-globaltool --version 4.0.3 --tool-path $(Build.SourcesDirectory)/.custom-tools/dotnet-reportgenerator-globaltool'
  # Generate code coverage HTML report based on coverage data XML files.
  # See more here: https://github.com/danielpalme/ReportGenerator#usage.
  - script: '$(Build.SourcesDirectory)/.custom-tools/dotnet-reportgenerator-globaltool/reportgenerator "-reports:**/CodeCoverage/code-coverage-data.xml" "-targetdir:./CodeCoverageReport"'
    displayName: Generate code coverage report
    name: generate_code_coverage_report
  # Publish code coverage report.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-code-coverage-results?view=vsts.
  - task: PublishCodeCoverageResults@1
    displayName: Publish code coverage report
    name: publish_code_coverage_report
    enabled: true
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '**/CodeCoverage/code-coverage-data.xml'
      reportDirectory: '**/CodeCoverageReport'
      additionalCodeCoverageFiles: '**/CodeCoverageReport/index.html'
  # Install sonarscanner tool to be able to perform a SonarQube analysis.
  # See more here: https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild.
  - task: DotNetCoreCLI@2
    displayName: Install sonarscanner tool
    name: install_sonarscanner
    enabled: false
    inputs:
      command: custom
      custom: tool
      arguments: 'install dotnet-sonarscanner --version 4.4.2 --tool-path $(Build.SourcesDirectory)/.custom-tools/dotnet-sonarscanner'
  # Run SonarQube analysis.
  # See more here: https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild.
  - script: |
      dotnet tool install dotnet-sonarscanner --version 4.4.2 --tool-path $(Build.SourcesDirectory)/.custom-tools/dotnet-sonarscanner
      dotnet-sonarscanner begin /k:"aspnet-core-logging" /s:"$(Build.SourcesDirectory)/SonarQubeAnalysis.xml" /d:sonar.login="%SONAR_LOGIN%"
      dotnet build $(Build.SourcesDirectory)/Todo.sln --configuration ${{ parameters.build.configuration }}
      dotnet-sonarscanner end
    displayName: Run SonarQube analysis
    name: run_sonarqube_analysis
    enabled: true
    # The token used for accessing SOnarQube server is provided as a secret variable.
    # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts&tabs=yaml%2Cbatch#secret-variables.
    env:
      SONAR_LOGIN: $(sonar.login)