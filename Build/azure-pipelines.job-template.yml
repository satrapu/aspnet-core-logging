parameters:
  job:
    name: ''
    displayName: ''
  pool: ''
  build:
    configuration: 'Release'
  sonar:
    enabled: False
    buildBreaker:
      enabled: False
  publishPipelineArtifacts: True
  db4it:
    dockerImage: ''
    dockerImageTag: ''
    dockerContainerName: ''
    dockerPortMapping: ''
    dockerHostPortBuildVariableName: ''
    dockerContainerEnvironmentVariables: ''
    dockerContainerLogPatternForDatabaseReady: ''
    dockerContainerHealthcheckCommand: ''
    databaseConnectionString:
      value: ''
      portPlaceholder: ''
    databaseReadinessStrategy: ''

jobs:
- job: ${{ parameters.job.name }}
  displayName: ${{ parameters.job.displayName }}
  continueOnError: False
  pool: ${{ parameters.pool }}
  workspace:
    clean: all
  steps:
  # Install specific .NET Core SDK version.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops.
  # Installing a specific .NET Core SDK version is needed to avoid installing a .NET Core global tool in a following task and 
  # then have Azure DevOps complain that it cannot find it.
  # This issue is documented here: https://github.com/Microsoft/azure-pipelines-tasks/issues/8291.
  - task: UseDotNet@2
    name: install_dotnetcore_sdk_required_by_application
    displayName: Install .NET Core SDK required by application
    enabled: True
    inputs:
      packageType: 'sdk'
      version: $(DotNetCore_SDK_Version)
      
  - task: UseDotNet@2
    name: install_dotnetcore_sdk_required_by_sonarsource_extension
    displayName: Install .NET Core SDK required by SonarCloud Azure DevOps extension
    enabled: True
    inputs:
      packageType: 'sdk'
      version: 2.1.803
    condition: |
      and
      (
          succeeded()
        , eq( ${{ parameters.sonar.enabled }}, True)
      )

  - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
    displayName: 'Prepare Analysis on SonarCloud'
    inputs:
      SonarCloud: 'sonar-cloud'
      organization: 'satrapu-github'
      projectKey: 'aspnet-core-logging'
      extraProperties: |
        sonar.sourceEncoding=UTF-8
        sonar.cs.nunit.reportsPaths=**/TestResults/*.*
        sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml
        sonar.coverage.exclusions=**/Tests/**/*.cs,**/Sources/Todo.Persistence/**/TodoDbContextModelSnapshot.cs
    condition: |
      and
      (
          succeeded()
        , eq( ${{ parameters.sonar.enabled }}, True)
      )
      
  # Compile source code.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops.
  - script: >-
      dotnet build $(Build.SourcesDirectory)/Todo.sln
      --configuration ${{ parameters.build.configuration }}
    name: build_sources
    displayName: Build sources
    enabled: True
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)

  # Run unit tests and collect code coverage metrics.
  # See more about running selective tests here: https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests#nunit.
  # Decorate the AssemblyInfo.cs found inside each unit test related project with:
  #     [assembly: NUnit.Framework.Category("UnitTests")]
  # 
  # After migrating application from .NET Core 2.2 to 3.1, the --filter "Category=IntegrationTests" argument 
  # no longer works, but this ones does work: -- NUnit.Where="cat == UnitTests".
  # See more here: http://blog.prokrams.com/2019/12/16/nunit3-filter-dotnet/#tldr.
  - script: >-
      dotnet test $(Build.SourcesDirectory)/Todo.sln
      --no-build
      --configuration ${{ parameters.build.configuration }}
      --test-adapter-path "."
      --logger "nunit"
      /p:CollectCoverage=True
      /p:CoverletOutputFormat=opencover
      /p:Include="[Todo.*]*"
      /p:Exclude=\"[Todo.*.*Tests]*,[Todo.Persistence]*.TodoDbContextModelSnapshot\"
      -- NUnit.Where="cat == UnitTests"
    name: run_unit_tests
    displayName: Run unit tests
    enabled: True
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)

  # Publish unit test results inside the build 'Tests' tab.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=yaml.
  - task: PublishTestResults@2
    displayName: Publish unit test results
    name: publish_unit_test_results
    condition: succeededOrFailed()
    enabled: True
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/UnitTests/**/TestResults/*'
      mergeTestResults: True
      buildConfiguration: ${{ parameters.build.configuration }}
      publishRunAttachments: True

  # Install and start Docker Engine on macOS.
  # See more here: https://github.com/microsoft/azure-pipelines-image-generation/issues/738#issuecomment-527013065.
  - script: |
      chmod +x $(Build.SourcesDirectory)/Build/start-docker-on-macOS.sh
      $(Build.SourcesDirectory)/Build/start-docker-on-macOS.sh
    name: install_and_start_docker
    displayName: Install and start Docker
    condition: |
      and
      (
          succeeded()
        , eq( variables['Agent.OS'], 'Darwin')
      )

  # Runs a PowerShell script to start a Docker container hosting the database 
  # to be targeted by the integration tests.
  # Checking whether the database is ready for processing incoming queries is done 
  # using Docker logs command (https://docs.docker.com/engine/reference/commandline/logs/).
  - task: PowerShell@2
    name: provision_db4it_docker_container_using_log_polling
    displayName: Provision db4it Docker container using log-polling
    inputs:
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)/Build/Provision-Docker-container-using-log-polling.ps1'
      arguments: >-
        -DockerImageName '${{ parameters.db4it.dockerImage }}'
        -DockerImageTag '${{ parameters.db4it.dockerImageTag }}'
        -ContainerName '${{ parameters.db4it.dockerContainerName }}'
        -PortMapping '${{ parameters.db4it.dockerPortMapping }}'
        -DockerHostPortBuildVariableName '${{ parameters.db4it.dockerHostPortBuildVariableName}}'
        -ContainerEnvironmentVariables '${{ parameters.db4it.dockerContainerEnvironmentVariables }}'
        -ContainerLogPatternForDatabaseReady '${{ parameters.db4it.dockerContainerLogPatternForDatabaseReady }}'
        -SleepingTimeInMillis 250
        -MaxNumberOfTries 120
      errorActionPreference: 'stop'
      failOnStderr: True
      workingDirectory: $(Build.SourcesDirectory)
    condition: |
      and
      (
          succeeded()
        , eq( '${{ parameters.db4it.databaseReadinessStrategy }}', 'log-polling')
      )

  # Runs a PowerShell script to start a Docker container hosting the database 
  # to be targeted by the integration tests.
  # Checking whether the database is ready for processing incoming queries is done 
  # using Docker healthcheck support (https://docs.docker.com/engine/reference/run/#healthcheck).
  - task: PowerShell@2
    name: provision_db4it_docker_container_using_healthcheck
    displayName: Provision db4it Docker container using healthcheck
    inputs:
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)/Build/Provision-Docker-container-using-healthcheck.ps1'
      arguments: >-
        -DockerImageName '${{ parameters.db4it.dockerImage }}'
        -DockerImageTag '${{ parameters.db4it.dockerImageTag }}'
        -ContainerName '${{ parameters.db4it.dockerContainerName }}'
        -PortMapping '${{ parameters.db4it.dockerPortMapping }}'
        -DockerHostPortBuildVariableName '${{ parameters.db4it.dockerHostPortBuildVariableName}}'
        -ContainerEnvironmentVariables '${{ parameters.db4it.dockerContainerEnvironmentVariables }}'
        -HealthCheckCommand '${{ parameters.db4it.dockerContainerHealthcheckCommand }}'
        -HealthCheckIntervalInMilliseconds 250
        -MaxNumberOfTries 120
      errorActionPreference: 'stop'
      failOnStderr: True
      workingDirectory: $(Build.SourcesDirectory)
    condition: |
      and
      (
          succeeded()
        , eq( '${{ parameters.db4it.databaseReadinessStrategy }}', 'healthcheck')
      )

  # Runs a PowerShell script to ensure the connection string pointing to the database 
  # to be targeted by the integration tests uses the appropriate port.
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      errorActionPreference: 'stop'
      script: |
        Write-Output "The Docker host port mapped to container '${{ parameters.db4it.dockerContainerName }}' is: $(${{ parameters.db4it.dockerHostPortBuildVariableName }})"
        $normalizedDatabaseConnectionString = "${{ parameters.db4it.databaseConnectionString.value }}" -replace '${{ parameters.db4it.databaseConnectionString.portPlaceholder }}', $(${{ parameters.db4it.dockerHostPortBuildVariableName }})
        Write-Output "##vso[task.setvariable variable=DatabaseConnectionStrings.Todo]$normalizedDatabaseConnectionString"
        Write-Output "The normalized database connection string is: $normalizedDatabaseConnectionString"
    name: normalize_db_connection_string_pointing_to_db4it
    displayName: Normalize database connection string pointing to db4it Docker container
    enabled: True

  # Run integration tests and collect code coverage metrics.
  # Decorate the AssemblyInfo.cs found inside each integration test related project with:
  #     [assembly: NUnit.Framework.Category("IntegrationTests")]
  - script: >-
      dotnet test $(Build.SourcesDirectory)/Todo.sln
      --no-build
      --configuration ${{ parameters.build.configuration }}
      --test-adapter-path "."
      --logger "nunit"
      /p:CollectCoverage=True
      /p:CoverletOutputFormat=opencover
      /p:Include="[Todo.*]*"
      /p:Exclude=\"[Todo.*.*Tests]*,[Todo.Persistence]*.TodoDbContextModelSnapshot\"
      -- NUnit.Where="cat == IntegrationTests"
    name: run_integration_tests
    displayName: Run integration tests
    enabled: True
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)
      CONNECTIONSTRINGS__TODOFORINTEGRATIONTESTS: $(DatabaseConnectionStrings.Todo)
      AUTH0__CLIENTID: $(IntegrationTests.Auth0.ClientId)
      AUTH0__CLIENTSECRET: $(IntegrationTests.Auth0.ClientSecret)

  # Publish integration test results inside the build 'Tests' tab.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=yaml.
  - task: PublishTestResults@2
    displayName: Publish integration test results
    name: publish_integration_test_results
    condition: succeededOrFailed()
    enabled: True
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/IntegrationTests/**/TestResults/*'
      mergeTestResults: True
      buildConfiguration: ${{ parameters.build.configuration }}
      publishRunAttachments: True

  # Publish test results as pipeline artifacts.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#publish-a-pipeline-artifact.
  #
  # This task will make use of the ~/Tests/.artifactignore file.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#using-artifactignore-files.
  - task: PublishPipelineArtifact@1
    displayName: Publish test results as pipeline artifacts
    name: publish_test_results_as_pipeline_artifacts
    condition: |
      and
      (
          succeededOrFailed()
        , eq( ${{ parameters.publishPipelineArtifacts }}, True)
      )
    inputs:
      artifact: 'test-results-$(Agent.OS)-$(Agent.OSArchitecture)'
      path: '$(Build.SourcesDirectory)/Tests'

  # Install reportgenerator tool to be able to generate code coverage related reports.
  - script: >-
      dotnet tool install dotnet-reportgenerator-globaltool 
      --global
      --version $(ReportGenerator_Version)
    name: install_code_coverage_report_generator
    displayName: Install code coverage report generator tool
    enabled: True
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)

  # Generate code coverage report:
  #   - combine several OpenCover coverage data files into one single file in Cobertura format
  #   - generate coverage HTML report ready to be displayed by Azure DevOps
  #   - generate coverage badge to be displayed on GitHub project home page
  # See more here: https://github.com/danielpalme/ReportGenerator#usage.
  # See more about the output formats here: https://github.com/danielpalme/ReportGenerator/wiki/Output-formats.
  # In order to be able to see the report inside the Code Coverage tab on Azure DevOps, 
  # enable Azure Boards for your project, as documented here: https://developercommunity.visualstudio.com/solutions/403137/view.html.
  - script: >-
      reportgenerator 
      "-reports:$(Build.SourcesDirectory)/Tests/**/coverage.opencover.xml"
      "-targetdir:$(Build.SourcesDirectory)/.CodeCoverageReport"
      "-reporttypes:Cobertura;Badges"
    name: generate_code_coverage_report
    displayName: Generate code coverage report
    enabled: True

  # Publish code coverage report.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-code-coverage-results?view=azure-devops.
  - task: PublishCodeCoverageResults@1
    name: publish_code_coverage_report
    displayName: Publish code coverage report
    enabled: True
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/.CodeCoverageReport/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/.CodeCoverageReport'

  - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
    displayName: 'Run Code Analysis'
    condition: |
      and
      (
          succeeded()
        , eq( ${{ parameters.sonar.enabled }}, True)
      )

  - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
    displayName: 'Publish Quality Gate Result'
    condition: |
      and
      (
          succeeded()
        , eq( ${{ parameters.sonar.enabled }}, True)
        , eq( ${{ parameters.sonar.buildBreaker.enabled }}, True)
      )
      
  # Set the current Git branch name into a variable.
  # This build step will be run only in case the build was triggered by a pul request.
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      errorActionPreference: 'stop'
      script: |
        Write-Output "##vso[task.setvariable variable=CurrentGitBranchName]$(System.PullRequest.SourceBranch)"
    name: load_current_git_branch_name_from_pull_request_info
    displayName: Load current Git branch name from PR info
    condition: |
      and
      (
          succeeded()
        , eq( ${{ parameters.sonar.enabled }}, True)
        , eq( ${{ parameters.sonar.buildBreaker.enabled }}, True)
        , eq( variables['Build.Reason'], 'PullRequest')
      )
      
  # Set the current Git branch name into a variable.
  # This build step will be run only in case the build was triggered by anything else but a pull request.
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      errorActionPreference: 'stop'
      script: |
        Write-Output "##vso[task.setvariable variable=CurrentGitBranchName]$(Build.SourceBranch)"
    name: load_current_git_branch_name_from_commit_info
    displayName: Load current Git branch name from commit info
    condition: |
      and
      (
          succeeded()
        , eq( ${{ parameters.sonar.enabled }}, True)
        , eq( ${{ parameters.sonar.buildBreaker.enabled }}, True)
        , ne( variables['Build.Reason'], 'PullRequest')
      )
      
  # Normalize Git branch name since Azure DevOps is sending a full or short name.
  # See more here: https://stackoverflow.com/questions/59956206/how-to-get-a-branch-name-with-a-slash-in-azure-devops
  # and here: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#build-variables.
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      errorActionPreference: 'stop'
      script: |
        $currentGitBranchName = "$(CurrentGitBranchName)"
        $normalizedGitBranchName = $currentGitBranchName -Replace 'refs/heads/', ''
        Write-Output "##vso[task.setvariable variable=NormalizedGitBranchName]$normalizedGitBranchName"
        Write-Output "The current Git branch name is: $currentGitBranchName"
        Write-Output "The normalized Git branch name is: $normalizedGitBranchName"
    name: normalize_current_git_branch_name
    displayName: Normalize current Git branch name
    condition: |
      and
      (
          succeeded()
        , eq( ${{ parameters.sonar.enabled }}, True)
        , eq( ${{ parameters.sonar.buildBreaker.enabled }}, True)
      )

  # Runs a PowerShell script to break the build in case Sonar quality gate has failed.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/powershell?view=azure-devops.
  - task: PowerShell@2
    name: sonar_build_breaker
    displayName: Run Sonar build breaker
    # See more about conditions here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml.
    condition: |
      and
      (
          succeeded()
        , eq( ${{ parameters.sonar.enabled }}, True)
        , eq( ${{ parameters.sonar.buildBreaker.enabled }}, True)
      )
    inputs:
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)/Build/SonarBuildBreaker.ps1'
      arguments: >-
        -SonarProjectKey 'aspnet-core-logging'
        -SonarServerBaseUrl 'https://sonarcloud.io'
        -SonarToken "$(CurrentProject.Sonar.Token)" 
        -GitBranchName "$(NormalizedGitBranchName)"
      errorActionPreference: stop
      failOnStderr: True
      workingDirectory: $(Build.SourcesDirectory)
