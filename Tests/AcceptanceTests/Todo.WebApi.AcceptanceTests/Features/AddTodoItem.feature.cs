// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Todo.WebApi.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AddTodoItemsFeature : object, Xunit.IClassFixture<AddTodoItemsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AddTodoItem.feature"
#line hidden
        
        public AddTodoItemsFeature(AddTodoItemsFeature.FixtureData fixtureData, Todo_WebApi_AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Add todo items", "As a user I want to be able to add new todo items so I won\'t forget about the imp" +
                    "ortant things I need to take care of each day.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add new todo item")]
        [Xunit.TraitAttribute("FeatureTitle", "Add todo items")]
        [Xunit.TraitAttribute("Description", "Add new todo item")]
        [Xunit.TraitAttribute("Category", "add-new-todo-item")]
        [Xunit.TraitAttribute("Category", "expected-positive-result")]
        public void AddNewTodoItem()
        {
            string[] tagsOfScenario = new string[] {
                    "add-new-todo-item",
                    "expected-positive-result"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new todo item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
        testRunner.Given("the current user is authorized to add todo items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "IsComplete"});
                table1.AddRow(new string[] {
                            "Add more acceptance tests",
                            "true"});
#line 8
        testRunner.When("the current user tries adding a new todo item", ((string)(null)), table1, "When ");
#line hidden
#line 11
        testRunner.Then("the system must add the new todo item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "HttpStatusCode",
                            "LocationHeaderValueMatchExpression"});
                table2.AddRow(new string[] {
                            "201",
                            "http*:*//*/api/todo/*"});
#line 12
        testRunner.And("reply with a success response", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unauthenticated user cannot add todo items")]
        [Xunit.TraitAttribute("FeatureTitle", "Add todo items")]
        [Xunit.TraitAttribute("Description", "Unauthenticated user cannot add todo items")]
        [Xunit.TraitAttribute("Category", "add-new-todo-item")]
        [Xunit.TraitAttribute("Category", "expected-negative-result")]
        public void UnauthenticatedUserCannotAddTodoItems()
        {
            string[] tagsOfScenario = new string[] {
                    "add-new-todo-item",
                    "expected-negative-result"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unauthenticated user cannot add todo items", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
        testRunner.Given("the current user is not authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "IsComplete"});
                table3.AddRow(new string[] {
                            "Authenticate user first",
                            "false"});
#line 20
        testRunner.When("the current user tries adding a new todo item", ((string)(null)), table3, "When ");
#line hidden
#line 23
        testRunner.Then("the system must not add the new todo item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "HttpStatusCode"});
                table4.AddRow(new string[] {
                            "401"});
#line 24
        testRunner.And("reply with a failed response", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unauthorized user cannot add todo items")]
        [Xunit.TraitAttribute("FeatureTitle", "Add todo items")]
        [Xunit.TraitAttribute("Description", "Unauthorized user cannot add todo items")]
        [Xunit.TraitAttribute("Category", "add-new-todo-item")]
        [Xunit.TraitAttribute("Category", "expected-negative-result")]
        public void UnauthorizedUserCannotAddTodoItems()
        {
            string[] tagsOfScenario = new string[] {
                    "add-new-todo-item",
                    "expected-negative-result"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unauthorized user cannot add todo items", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
        testRunner.Given("the current user is not authorized to add todo items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "IsComplete"});
                table5.AddRow(new string[] {
                            "Grant the appropriate permissions to the current user first",
                            "false"});
#line 32
        testRunner.When("the current user tries adding a new todo item", ((string)(null)), table5, "When ");
#line hidden
#line 35
        testRunner.Then("the system must not add the new todo item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "HttpStatusCode"});
                table6.AddRow(new string[] {
                            "403"});
#line 36
        testRunner.And("reply with a failed response", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AddTodoItemsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AddTodoItemsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
