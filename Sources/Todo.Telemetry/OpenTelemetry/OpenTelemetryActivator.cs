namespace Todo.Telemetry.OpenTelemetry
{
    using System;
    using System.Collections.Generic;

    using Commons;

    using Configuration;

    using global::OpenTelemetry.Resources;
    using global::OpenTelemetry.Trace;

    using Microsoft.AspNetCore.Hosting;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Logging;

    /// <summary>
    /// Contains extension methods used for integrating OpenTelemetry with this application.
    /// </summary>
    public static class OpenTelemetryActivator
    {
        private const string OpenTelemetryConfigurationSectionName = "OpenTelemetry";

        /// <summary>
        /// Adds OpenTelemetry to the given <paramref name="services"/> instance.
        /// </summary>
        /// <param name="services">The application services collection.</param>
        /// <param name="configuration">The application configuration.</param>
        /// <param name="webHostEnvironment">The application hosting environment.</param>
        /// <returns>The given <paramref name="services"/> instance.</returns>
        /// <exception cref="ArgumentNullException">Thrown when either <paramref name="services"/>,
        /// <paramref name="configuration"/> or <paramref name="webHostEnvironment"/> is null.</exception>
        public static IServiceCollection AddOpenTelemetry(this IServiceCollection services,
            IConfiguration configuration, IWebHostEnvironment webHostEnvironment)
        {
            ArgumentNullException.ThrowIfNull(services);
            ArgumentNullException.ThrowIfNull(configuration);
            ArgumentNullException.ThrowIfNull(webHostEnvironment);

            OpenTelemetryOptions openTelemetryOptions = configuration.GetOpenTelemetryOptions();

            if (openTelemetryOptions.Enabled is false)
            {
                return services;
            }

            return
                services
                    .AddLogging(loggingBuilder =>
                    {
                        loggingBuilder.AddOpenTelemetry(openTelemetryOptions);
                    })
                    .AddOpenTelemetryTracing(traceProviderBuilder =>
                    {
                        traceProviderBuilder
                            .SetResourceBuilder(
                                ResourceBuilder
                                    .CreateDefault()
                                    .AddService(webHostEnvironment.ApplicationName)
                                    .AddAttributes(new Dictionary<string, object>
                                    {
                                            { "service.instance.attributes.custom.EnvironmentName", webHostEnvironment.EnvironmentName },
                                            { "service.instance.attributes.custom.ContentRootPath", webHostEnvironment.ContentRootPath },
                                            { "service.instance.attributes.custom.WebRootPath", webHostEnvironment.WebRootPath ?? "<null>" },
                                            { "service.instance.attributes.custom.OperationSystem", Environment.OSVersion.ToString() },
                                            { "service.instance.attributes.custom.MachineName", Environment.MachineName },
                                            { "service.instance.attributes.custom.ProcessorCount", Environment.ProcessorCount },
                                            { "service.instance.attributes.custom.DotNetVersion", Environment.Version.ToString() }

                                    }))
                            .AddAspNetCoreInstrumentation()
                            .AddEntityFrameworkCoreInstrumentation(options =>
                            {
                                options.SetDbStatementForText =
                                openTelemetryOptions.Instrumentation.EntityFrameworkCore.SetDbStatementForText;
                            })
                            .AddJaegerExporter(options =>
                            {
                                options.AgentHost = openTelemetryOptions.Exporters.Jaeger.AgentHost;
                                options.AgentPort = openTelemetryOptions.Exporters.Jaeger.AgentPort;
                            })
                            // @satrapu April 23rd, 2022: Ensure activities generated by the application will be picked up
                            // by OpenTelemetry.
                            .AddSource(ActivitySources.TodoActivitySource.Name);
                    });
        }

        /// <summary>
        /// Adds log events to OpenTelemery.
        /// </summary>
        /// <param name="loggingBuilder">The application logging builder.</param>
        /// <param name="openTelemetryOptions">The options needed to configure OpenTelemetry integration.</param>
        /// <returns>The given <paramref name="loggingBuilder"/> instance.</returns>
        /// <exception cref="ArgumentNullException">Thrown when either <paramref name="loggingBuilder"/>
        /// or <paramref name="configuration"/> is null.</exception>
        private static ILoggingBuilder AddOpenTelemetry(this ILoggingBuilder loggingBuilder, OpenTelemetryOptions openTelemetryOptions)
        {
            ArgumentNullException.ThrowIfNull(loggingBuilder);
            ArgumentNullException.ThrowIfNull(openTelemetryOptions);

            return loggingBuilder.AddOpenTelemetry(options =>
            {
                if (openTelemetryOptions.AttachLogsToActivity)
                {
                    // Ensure events produces by ILogger will be exported by Open Telemetry to Jaeger.
                    // See more here: https://github.com/open-telemetry/opentelemetry-dotnet/issues/1739.
                    options.AttachLogsToActivityEvent();
                }

                options.IncludeScopes = openTelemetryOptions.IncludeScopes;
                options.IncludeFormattedMessage = openTelemetryOptions.IncludeFormattedMessage;
                options.ParseStateValues = openTelemetryOptions.ParseStateValues;
            });
        }

        private static OpenTelemetryOptions GetOpenTelemetryOptions(this IConfiguration configuration)
        {
            var openTelemetryOptions = new OpenTelemetryOptions();
            configuration.Bind(OpenTelemetryConfigurationSectionName, openTelemetryOptions);
            return openTelemetryOptions;
        }
    }
}
