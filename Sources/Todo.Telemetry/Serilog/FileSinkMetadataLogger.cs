namespace Todo.Telemetry.Serilog
{
    using System;
    using System.Threading.Tasks;
    using System.Security.Principal;

    using ApplicationFlows;

    using Commons.Constants;
    using Commons.StartupLogic;

    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.Logging;

    /// <summary>
    /// Logs metadata related to the current Serilog file sink, if one has been configured.
    /// </summary>
    public class FileSinkMetadataLogger : IStartupLogicTask
    {
        private const string FlowName = "ApplicationStartup/ExecuteStartupLogicTasks/LogFileSinkDirectory";
        private static readonly IPrincipal Principal = new GenericPrincipal(new GenericIdentity("serilog-logging-provider"), []);

        private readonly IConfiguration configuration;
        private readonly ILogger logger;

        /// <summary>
        /// Creates a new instance of the <see cref="FileSinkMetadataLogger"/> class.
        /// </summary>
        /// <param name="configuration">Application configuration.</param>
        /// <param name="logger">Logs events generated by this instance.</param>
        /// <exception cref="ArgumentNullException">Thrown in case any of the above parameters is null.</exception>
        public FileSinkMetadataLogger(IConfiguration configuration, ILogger<FileSinkMetadataLogger> logger)
        {
            this.configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            this.logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        /// <summary>
        /// Logs the path pointing to the folder where Serilog file sink will write the events generated by this application.
        /// </summary>
        public Task ExecuteAsync()
        {
            return SimpleApplicationFlow.ExecuteAsync(FlowName, LogFileSinkDirectory, Principal, logger);
        }

        private Task LogFileSinkDirectory()
        {
            if (SerilogActivator.IsFileSinkConfigured(configuration))
            {
                string logsHomeDirectory = Environment.GetEnvironmentVariable(Logging.LogsHomeEnvironmentVariable);
                logger.LogInformation("The currently configured Serilog file sink will write files to the directory: [{LogsHomeDirectory}]", logsHomeDirectory);
            }
            else
            {
                logger.LogInformation("No Serilog file sink has been configured");
            }

            return Task.CompletedTask;
        }
    }
}
