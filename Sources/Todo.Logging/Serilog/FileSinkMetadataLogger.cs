namespace Todo.Logging.Serilog
{
    using System;

    using Commons.ApplicationEvents;
    using Commons.Constants;

    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.Logging;

    /// <summary>
    /// Logs metadata related to the current Serilog file sink, if one has been configured.
    /// </summary>
    public class FileSinkMetadataLogger : IApplicationStartedEventListener
    {
        private readonly IConfiguration configuration;
        private readonly ILogger logger;

        /// <summary>
        /// Creates a new instance of the <see cref="FileSinkMetadataLogger"/> class.
        /// </summary>
        /// <param name="configuration">Application configuration.</param>
        /// <param name="logger">Logs events generated by this instance.</param>
        /// <exception cref="ArgumentNullException">Thrown in case any of the above parameters is null.</exception>
        public FileSinkMetadataLogger(IConfiguration configuration,
            ILogger<FileSinkMetadataLogger> logger)
        {
            this.configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            this.logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        /// <summary>
        /// Logs the path pointing to the folder where Serilog file sink will write the events generated by this
        /// application.
        /// </summary>
        public void OnApplicationStarted()
        {
            if (!SerilogActivator.IsFileSinkConfigured(configuration))
            {
                logger.LogInformation("No Serilog file sink has been configured");

                return;
            }

            const string environmentVariableName = Logging.LogsHomeEnvironmentVariable;
            string environmentVariableValue = Environment.GetEnvironmentVariable(environmentVariableName);

            logger.LogInformation(
                "The currently configured Serilog file sink will write files to the directory: [{LogsHomeDirectory}]",
                environmentVariableValue);
        }
    }
}
